{"version":3,"sources":["../src/datasource.js"],"names":["SushiDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAAaA,e;AAEX,iCAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,eAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,eAAKC,GAAL,GAAWL,iBAAiBK,GAA5B;AACA,eAAKC,IAAL,GAAYN,iBAAiBM,IAA7B;AACA,eAAKC,CAAL,GAASN,EAAT;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACD;;;;gCAEKK,O,EAAS,CACd;;;2CAEgB;AACf,mBAAO,IAAP;AACD;;;0CAEeA,O,EAAS,CAExB;;;0CAEeA,O,EAAS,CACxB","file":"datasource.js","sourcesContent":["export class SushiDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n  }\n\n  testDatasource() {\n    return true;\n  }\n\n  annotationQuery(options) {\n\n  }\n\n  metricFindQuery(options) {\n  }\n}\n"]}